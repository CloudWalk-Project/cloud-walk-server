generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Canva {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(30)
  price              Float
  description        String?              @db.VarChar(300)
  inStock            Boolean              @default(true) @map("in_stock")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @updatedAt @map("updated_at")
  categoryName       String               @map("category_name") @db.VarChar(255)
  image              String
  genre              CanvaGenre           @default(Others)
  category           Category             @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  batchUpdateRecords BatchUpdateRecords[]
  product            Product[]

  @@map("canvas")
}

model Cart {
  id               Int       @id @default(autoincrement())
  priceSum         Float?    @map("price_sum")
  finalPrice       Float     @map("final_price")
  totalDiscount    Float     @map("total_discount")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")
  costumerId       Int       @map("costumer_id")
  voucherId        Int?      @map("voucher_id")
  volumeOfProducts Int?      @map("volume_of_products")
  customer         Customer  @relation(fields: [costumerId], references: [id], onDelete: NoAction)
  voucher          Voucher?  @relation(fields: [voucherId], references: [id], onDelete: NoAction)
  product          Product[]

  @@map("carts")
}

model Category {
  id          Int      @id @default(autoincrement())
  price       Float
  name        String   @unique @db.VarChar(255)
  description String?  @db.VarChar(300)
  cost        Float
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  canvas      Canva[]

  @@map("categories")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(25)
  password  String   @db.VarChar(15)
  email     String   @unique @db.VarChar(50)
  wallet    Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  carts     Cart[]

  @@map("customers")
}

model Guideline {
  id            Int      @id @default(autoincrement())
  aboutUs       String   @map("about_us") @db.VarChar(500)
  privacyPolicy String?  @map("privacy_policy") @db.VarChar(500)
  refundPolicy  String   @map("refund_policy") @db.VarChar(500)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("guidelines")
}

model Product {
  id        Int      @id @default(autoincrement())
  erased    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  cartId    Int      @map("cart_id")
  canvaId   Int?     @map("canva_id")
  quantity  Int?
  canva     Canva?   @relation(fields: [canvaId], references: [id], onDelete: NoAction)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: NoAction)

  @@map("products")
}

model BatchUpdateRecords {
  id       Int   @id @default(autoincrement())
  oldPrice Float @map("old_price")
  newPrice Float @map("new_price")

  canvaId       Int      @map("canva_id")
  createdAt     DateTime @default(now()) @map("created_at")
  atStatus      Int      @map("at_status")
  statusMessage String?  @map("status_message")

  canva             Canva             @relation(fields: [canvaId], references: [id], onDelete: Cascade, map: "batch_update_records_fk0")
  batchUpdadeStatus BatchUpdateStatus @relation(fields: [atStatus], references: [id], map: "batch_update_records_fk1")

  

  @@map("batch_update_records")
}

model BatchUpdateStatus {
  id                 Int                  @id @default(autoincrement())
  totalItensUpdate   Int                  @map("total_itens_update")
  successes          Int?                 @default(0)
  failures           Int?                 @default(0)
  userId             Int                  @map("user_id")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @updatedAt @map("updated_at")
  user               User                 @relation(fields: [userId], references: [id], onDelete: NoAction, map: "batch_update_status_fk0")
  BatchUpdateRecords BatchUpdateRecords[]

  @@map("batch_update_status")
}

model User {
  id                   Int      @id @default(autoincrement())
  name                 String   @db.VarChar(25)
  image                String?  @db.VarChar(255)
  password             String   @db.VarChar(255)
  email                String   @unique @db.VarChar(50)
  role                 UserRole @default(SalesPerson)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at")
  recoverPasswordToken String?

  BatchUpdateStatus BatchUpdateStatus[]

  @@map("users")
}

model Voucher {
  id           Int       @id @default(autoincrement())
  discountRate Float     @map("discount_rate")
  active       Boolean   @default(false)
  startDate    DateTime? @map("start_date") @db.Date
  maxQuantity  Int?      @map("max_quantity")
  interval     Int
  endDate      DateTime? @map("end_date") @db.Date
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  cart         Cart[]

  @@map("vouchers")
}

enum UserRole {
  Owner
  Manager
  SalesPerson
}

enum CanvaGenre {
  Others
  Realism
  Abstract
  Fantasy
  Gothic
  PopArt
}
